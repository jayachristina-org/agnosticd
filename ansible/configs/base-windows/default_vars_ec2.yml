---
# -------------------------------------------------------------------
# AWS EC2 Environment settings
# -------------------------------------------------------------------
ansible_user: ec2-user
remote_user: ec2-user
aws_region: us-east-2

# -------------------------------------------------------------------
# Networking and DNS (AWS)
# -------------------------------------------------------------------
subdomain_base_short: "{{ guid }}"

subdomain_base: "{{ subdomain_base_short }}{{ subdomain_base_suffix }}"
zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "

# -------------------------------------------------------------------
# Windows Vars
# -------------------------------------------------------------------
windows_password: "{{ common_password }}"
windows_server_instance_type: m5.xlarge
windows_image_owner: "801119661308"
windows_instance_image: WIN2019-latest      # Custom definition in infra_images_predefined

infra_images_predefined:
  WIN2019-latest:
    owner: "{{ windows_image_owner }}"
    name: Windows_Server-2019-English-Core-Base-*
    architecture: x86_64
    aws_filters:
      is-public: true

# -------------------------------------------------------------------
# Role Vars
# -------------------------------------------------------------------
install_win_ssh: true
install_student_user: false

student_name: lab-user
student_password: "{{ common_password }}"
student_sudo: false
use_content_view: false
update_packages: false

# -------------------------------------------------------------------
# Instances Definition
# -------------------------------------------------------------------
instances:

  - name: "{{ windows_hostname | default('bastion') }}"
    count: 1
    unique: true
    public_dns: true
    image: "{{ windows_instance_image | default('WIN2019-latest') }}"
    flavor:
      ec2: "{{ windows_server_instance_type | default('m5.xlarge') }}"
    networks:
    - default
    servicePort: 5986 # WinRM port, ssh default is 22, http 5985, https 5986
    owner: "{{ windows_image_owner }}"
    tags:
    - key: "AnsibleGroup"
      value: "bastions,windows"
    - key: "ostype"
      value: "windows"
    security_groups:
    - DefaultSG
    - WinSG
    - HostSG
    UserData: |
      UserData:
              "Fn::Base64":
                "Fn::Join":
                  - ""
                  - - "<powershell>\n"
                    - "$admin = [adsi]('WinNT://./administrator, user')\n"
                    - "$admin.PSBase.Invoke('SetPassword', '{{ windows_password }}')\n"
                    - "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n"
                    - "$scriptPath=((New-Object System.Net.Webclient).DownloadString('https://gpte-public.s3.amazonaws.com/CI+Assets/Ansible+Windows+Workshop/ConfigureRemotingForAnsibleLatest.ps1'))\n"
                    - "Invoke-Command -ScriptBlock ([scriptblock]::Create($scriptPath)) -ArgumentList '-EnableCredSSP'\n"
                    - "</powershell>"

security_groups:
  - name: WinSG
    rules:

    - name: WinSGTCP
      description: "All TCP"
      from_port: 1
      to_port: 65535
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

    - name: WinSGUdp
      description: "All UDP"
      from_port: 1
      to_port: 65535
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

  - name: WebSG
    rules:

      - name: HTTPPorts
        description: "HTTP Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: HTTPSPorts
        description: "HTTP Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: ShowroomSG
    rules:

      - name: ShowroomHTTPS
        description: "Primary showroom endpoint - for reverse proxy"
        from_port: 8443
        to_port: 8443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: ShowroomExposed
        description: "Showroom views or exposed services, up to 26 of them"
        from_port: 8500
        to_port: 8525
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:

      - name: FromHostSG
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: -1
        from_group: HostSG
        rule_type: Ingress

...
