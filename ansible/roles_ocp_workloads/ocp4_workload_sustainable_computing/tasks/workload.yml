---
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

# To Do: Implement your workload deployment tasks here
# -------------------------------------------------------------------------

- name: Example Workload, print variable values
  debug:
    msg: "{{ item }}"
  loop:
  - "Variable 1: {{ ocp4_workload_sustainable_computing_variable_1 }}"
  - "Variable 2: {{ ocp4_workload_sustainable_computing_variable_2 }}"

# Sustainable Computing Operator is in the Community Catalog, and it's called Kepler
- name: Install Kepler (Sustainable Computing) Operator
  ansible.builtin.include_role:
    name: install_operator
  vars:
    install_operator_name: kepler
    install_operator_catalog: community-operators
    install_operator_namespace: openshift-operators
    install_operator_channel: "{{ ocp4_workload_sustainable_computing_operator_channel }}"

- name: create project for user by using a jinja2 template in the role
  k8s:
    state: present
    definition: "{{ lookup('template', role_path ~ '/templates/namespace.j2' ) | from_yaml }}"

- name: deploy a simple application by using an OpenShift template in the role
  shell: "oc new-app httpd-example -n {{ ocp4_workload_sustainable_computing_namespace }}"

- name: await application availability by querying the OpenShift API
  k8s_info:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    name: "httpd-example"
    namespace: "{{ ocp4_workload_sustainable_computing_namespace }}"
  register: r_app_deploymentConfig
  retries: 50
  delay: 10
  until:
  - r_app_deploymentConfig.resources[0].status.readyReplicas is defined
  - r_app_deploymentConfig.resources[0].status.replicas is defined
  - r_app_deploymentConfig.resources[0].status.readyReplicas == r_app_deploymentConfig.resources[0].status.replicas

- name: get route by querying the OpenShift API
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "httpd-example"
    namespace: "{{ ocp4_workload_sustainable_computing_namespace }}"
  register: r_app_route

- name: Notify requestor of route.  CloudForms will see this and send email
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
  - ""
  - "Use the following route to access your application {{ r_app_route.resources[0].spec.host }}"

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
