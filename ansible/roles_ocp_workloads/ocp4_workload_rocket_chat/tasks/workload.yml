---
- name: Create project in openshift and wait for it to be completed using kubernetes.core.k8s
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'project_create.yaml.j2') | from_yaml }}"
  register: project_result
  until: project_result is succeeded
  retries: 10
  delay: 30

- name: output project results
  debug:
    var: project_result

- name: Deploy Rocket Chat and register the route in route_result
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template',  item ) | from_yaml }}"
  loop:
  - rocket_chat_deployment_pvc1.yaml.j2
  - rocket_chat_deployment_pvc2.yaml.j2
  - rocket_chat_deployment_pvc3.yaml.j2
  - rocket_chat_deployment_service_db.yaml.j2
  - rocket_chat_deployment_service_rc.yaml.j2 
  - rocket_chat_deployment_dc_db.yaml.j2
  - rocket_chat_deployment_dc.yaml.j2
  - rocket_chat_deployment_route.yaml.j2
  register: route_result
  until: route_result is succeeded
  retries: 10
  delay: 30

- name: debug with above register
  debug:
    var: route_result

- name: Get route from the above registered output for rocket chat url 
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: rocket-chat # get from rocket_chat_deployment.yaml.j2 route creation task.
    namespace: "{{ ocp4_workload_rocket_chat_namespace }}"
  register: route_result
  until:
    - route_result.resources[0].spec.host is defined
    - route_result.resources[0].spec.host | length > 0
  retries: 10
  delay: 10

- name: debug with above register
  debug:
    var: route_result.resources[0].spec.host

- name: Set RocketChat URL
  ansible.builtin.set_fact:
    _rocketchat_url: "https://{{ route_result.resources[0].spec.host }}"

- name: Get User ID and Auth Token from RocketChat API
  uri:
    url: "{{ _rocketchat_url }}/api/v1/login"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
    body:
      user: admin
      password: admin
    return_content: yes
  register: response
  until: not response.failed 
  retries: 30
  delay: 30

- name: Extract User ID and AuthToken from response
  set_fact:
    _userId: "{{ response.content | regex_search('\"userId\":\"([^\"]+)', '\\1') }}"
    _authToken: "{{ response.content | regex_search('\"authToken\":\"([^\"]+)', '\\1') }}"

- debug:
    msg: "{{ _userId }} {{ _authToken }}"

- debug: var=_rocketchat_url

- name: Create channels clothing and utensils.
  uri:
    url: "{{ _rocketchat_url }}/api/v1/channels.create"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
      X-Auth-Token: "{{ _authToken.0 }}"
      X-User-Id: "{{ _userId.0 }}"
    body:
      '{ 
          "name": "{{ item.roomName }}",
          "members": []
      }'
    return_content: yes
  register: channel_result
  loop: "{{ ocp4_workload_rocket_chat_user_vars }}"

  # command: >-
  #   curl -X POST
  #   -H "X-Auth-Token: {{ _authToken.0 }}"
  #   -H "X-User-Id: {{ _userId.0 }}"
  #   -H "Content-type: application/json"
  #   "{{ _rocketchat_url }}/api/v1/channels.create"
  #   -d '{ "name": "{{ item.roomName }}", "members": [] }'

- pause:
- name: Create users pm_clothing and pm_utensils
  command: >-
    curl -X POST
    -H "X-Auth-Token: {{ _authToken.0 }}"
    -H "X-User-Id: {{ _userId.0 }}"
    -H "Content-type: application/json"
    {{ _rocketchat_url }}/api/v1/users.create
    -d '{
        "name": "{{ item.user }}",
        "email": "{{ item.user }}@example.com",
        "password": "{{ item.user }}",
        "username": "{{ item.user }}" 
      }'
  loop: "{{ ocp4_workload_rocket_chat_user_vars }}"
  register: user_result

- name: Assign pm_clothing user full access to clothing channel
  command: >-
    curl -X POST
    -H "X-Auth-Token: {{ _authToken.0 }}"
    -H "X-User-Id: {{ _userId.0 }}"
    -H "Content-type: application/json"
    "{{ _rocketchat_url }}/api/v1/channels.setRoles"
    -d '{
      "roomName": "{{ item.roomName }}",
      "username": "{{ item.user }}"
      }'
  loop: "{{ ocp4_workload_rocket_chat_user_vars }}"

- name: Send message to the clothing channel
  command: >-
    curl -X POST
    -H "X-Auth-Token: {{ _authToken.0 }}"
    -H "X-User-Id: {{ _userId.0 }}"
    -H "Content-type: application/json"  
    "{{ _rocketchat_url }}/api/v1/chat.postMessage"
     -d '{ "channel": "#{{ item.roomName }}", "text": "'"{{ item.msg }}"'" }'
  loop: "{{ ocp4_workload_rocket_chat_user_vars }}"
