---
- name: Set Ansible Python interpreter to k8s virtualenv
  ansible.builtin.set_fact:
    ansible_python_interpreter: /opt/virtualenvs/k8s/bin/python

- name: Set URLs for OpenShift GA releases (specific version)
  when:
    - (ocp4_installer_version | string).split('.') | length >= 3
  ansible.builtin.set_fact:
    ocp4_client_url: >-
      {{ '{0}/ocp/{1}/openshift-client-linux-{1}.tar.gz'.format(
        ocp4_installer_root_url | default("https://mirror.openshift.com/pub/openshift-v4/clients"),
        ocp4_installer_version
      ) }}

- name: Set URLs for OpenShift GA releases (latest stable)
  when:
    - (ocp4_installer_version | string).split('.') | length == 2
  set_fact:
    ocp4_client_url: >-
      {{ '{0}/ocp/stable-{1}/openshift-client-linux.tar.gz'.format(
        ocp4_installer_root_url | default("https://mirror.openshift.com/pub/openshift-v4/clients"),
        ocp4_installer_version
      ) }}

- name: Get the OpenShift CLI
  become: true
  ansible.builtin.unarchive:
    src: "{{ ocp4_client_url }}"
    remote_src: true
    dest: /usr/bin
    mode: 0775
    owner: root
    group: root
  register: r_client
  until: r_client is success
  retries: 10
  delay: 30

- name: Log in (obtain access token)
  community.okd.openshift_auth:
    username: "{{ sandbox_openshift_username }}"
    password: "{{ sandbox_openshift_password }}"
    host: "{{ sandbox_openshift_api_url }}"
  register: k8s_auth_results
  when: sandbox_openshift_username | default(false)

- name: Install OCP using HCP
  module_defaults:
    group/k8s:
      host: "{{ sandbox_openshift_api_url }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key|default(sandbox_openshift_api_key) }}"
      validate_certs: false

  block:
    - name: Get HCP CLI download URL
      kubernetes.core.k8s_info:
        api_version: console.openshift.io/v1
        kind: ConsoleCLIDownload
        name: hcp-cli-download
      register: r_hcp_cli_download
      retries: 20
      delay: 10
      until: r_hcp_cli_download.resources | length > 0

    - name: Set HCP CLI download URL
      when: r_hcp_cli_download.resources | length > 0
      ansible.builtin.set_fact:
        _ocp4_workload_rhacm_hcp_cli_url: >-
          {{ r_hcp_cli_download.resources[0] | to_json | from_json
          | json_query("spec.links[?contains(href,'/linux/amd64')].href") | first }}

    - name: Download HCP CLI
      ansible.builtin.get_url:
        url: "{{ _ocp4_workload_rhacm_hcp_cli_url }}"
        validate_certs: false
        dest: /tmp/hcp.tar.gz
        mode: "0660"
      register: r_hcp_cli
      until: r_hcp_cli is success
      retries: 10
      delay: 10

    - name: Install HCP CLI on bastion
      become: true
      ansible.builtin.unarchive:
        src: /tmp/hcp.tar.gz
        remote_src: true
        dest: /usr/bin
        mode: "0775"
        owner: root
        group: root
      args:
        creates: /usr/bin/hcp

    - name: Remove downloaded file
      ansible.builtin.file:
        state: absent
        path: /tmp/hcp.tar.gz

    - name: Setup HCP CLI bash completion
      become: true
      ansible.builtin.shell: "/usr/bin/hcp completion bash >/etc/bash_completion.d/hcp"
      args:
        creates: /etc/bash_completion.d/hcp

    - name: Create pull secret file for installation
      ansible.builtin.copy:
        dest: "/home/{{ ansible_user }}/pull-secret.txt"
        content: "{{ ocp4_pull_secret }}"

    # TODO: rethink
    - name: Login to the host cluster
      ansible.builtin.command: >-
        oc login --token={{ sandbox_openshift_api_key }} --server={{ sandbox_openshift_api_url }}


    - name: Create a hosted cluster using hcp cli
      ansible.builtin.command: >-
        hcp create cluster kubevirt
        --name "{{ cluster_name }}"
        --release-image quay.io/openshift-release-dev/ocp-release:{{ hcp_cluster_version }}-x86_64
        --node-pool-replicas {{ worker_instance_count }}
        --pull-secret "/home/{{ ansible_user }}/pull-secret.txt"
        --memory "{{ hcp_workers_memory }}"
        --cores {{ hcp_workers_cores }}
        --qos-class Guaranteed
        --base-domain "{{ cluster_dns_zone }}"
        --namespace "{{ hcp_ocp_namespace }}"
        --render

    - fail:
    - name: Delete pull secret file for installation
      ansible.builtin.file:
        path: "{{ output_dir }}/pull-secret.txt"
        state: absent

    - name: Get HostedCluster
      kubernetes.core.k8s_info:
        api_version: hypershift.openshift.io/v1beta1
        kind: HostedCluster
        name: "{{ cluster_name }}"
        namespace: "{{ hcp_ocp_namespace }}"
      register: r_hosted_cluster
      retries: 120
      delay: 10
      until:
        - r_hosted_cluster.resources[0].status.kubeadminPassword is defined
        - r_hosted_cluster.resources[0].status.kubeadminPassword.name is defined
        - r_hosted_cluster.resources[0].status.kubeadminPassword.name | length > 0
        - r_hosted_cluster.resources[0].status.kubeconfig is defined
        - r_hosted_cluster.resources[0].status.kubeconfig.name is defined
        - r_hosted_cluster.resources[0].status.kubeconfig.name | length > 0

    - name: Command add anotation to apiserver svc to share IP
      ansible.builtin.command: >-
        oc -n clusters-{{ guid }} annotate service
        kube-apiserver metallb.universe.tf/allow-shared-ip={{ guid }}-apps

    - name: Generate kubeconfig
      ansible.builtin.command: >-
        hcp create kubeconfig --name "{{ cluster_name }}" > /tmp/kubeconfig

    - name: Get nodeport for http
      ansible.builtin.command: >-
        oc --kubeconfig /tmp/kubeconfig
        get services -n openshift-ingress router-nodeport-default
        -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}'
      register: nodeport_http

    - name: Get nodeport for http
      ansible.builtin.command: >-
        oc --kubeconfig /tmp/kubeconfig
        get services -n openshift-ingress router-nodeport-default
        -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}'
      register: nodeport_https

    - name: Add the service (type LoadBalancer) for the apps
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'templates/workers_svc.yaml') }}"
        wait: true
        wait_timeout: 300
      vars:
        http_nodeport: "{{ nodeport_http.stdout }}"
        https_nodeport: "{{ nodeport_https.stdout }}"

    - name: Wait for the LoadBalancer value - workers
      register: full_svc_workers
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ guid }}-apps"
        namespace: "{{ hcp_ocp_namespace }}"
      until: full_svc_workers.resources[0].status.loadBalancer.ingress[0].ip | default('') != ''
      retries: 10
      delay: 2

    - name: Add A dns record - apps
      amazon.aws.route53:
        state: present
        aws_access_key_id: "{{ route53_aws_access_key_id }}"
        aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
        hosted_zone_id: "{{ route53_aws_zone_id }}"
        record: "*.apps.{{ cluster_name}}.{{ cluster_dns_zone }}"
        zone: "{{ cluster_dns_zone  }}"
        value: "{{ full_svc_workers.resources[0].status.loadBalancer.ingress[0].ip }}"
        type: A
      register: r_route53_add_record
      until: r_route53_add_record is success
      retries: 10
      delay: 30

    - name: Make sure .kube directory exists for {{ ansible_user }}
      ansible.builtin.file:
        state: directory
        path: /home/{{ ansible_user }}/.kube
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0700

    - name: Make sure .kube directory exists for root
      become: true
      ansible.builtin.file:
        state: directory
        path: /root/.kube
        owner: root
        group: root
        mode: 0700

    - name: Copy cluster kubeconfig to /home/{{ ansible_user }}/.kube/config
      ansible.builtin.copy:
        remote_src: true
        src: "/tmp/kubeconfig"
        dest: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600

    - name: Copy cluster kubeconfig to /root/.kube/config
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/kubeconfig
        dest: /root/.kube/config
        owner: root
        group: root
        mode: 0600

    - name: Set up Student User
      when: install_student_user | bool
      block:
        - name: Make sure .kube directory exists in /home/{{ student_name }}
          become: true
          ansible.builtin.file:
            state: directory
            path: "/home/{{ student_name }}/.kube"
            owner: "{{ student_name }}"
            group: users
            mode: 0700

        - name: Copy /tmp/kubeconfig to /home/{{ student_name }}/.kube
          become: true
          ansible.builtin.copy:
            src: /tmp/kubeconfig
            dest: /home/{{ student_name }}/.kube/config
            remote_src: true
            owner: "{{ student_name }}"
            group: users
            mode: 0600

    - name: Create OpenShift Bash completion file
      become: true
      ansible.builtin.shell: oc completion bash >/etc/bash_completion.d/openshift

- name: Gather and Print cluster info
  ansible.builtin.import_tasks: print_cluster_info.yml
