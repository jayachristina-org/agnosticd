---
- name: Empty variable _instance_interfaces
  set_fact:
    _instance_interfaces: []
- name: Set the instances interfaces 
  set_fact:
    _instance_interfaces: "{{ _instance_interfaces + [{'name': _network, 'macAddress': _instance.fixed_macs[_network]|default('2c:c2:60'|random_mac),'bridge': {}, 'model': 'e1000e', 'pciAddress': '0000:00:0' + (_network_idx+3)|string + '.0','network': {  'multus': {'networkName': _network}}} if _network != 'default' else {'name': 'default', 'model': 'e1000e', 'pciAddress': '0000:00:0' + (_network_idx+3)|string + '.0', 'masquerade': {}, 'network': {'pod': {}}}] }}"
  loop: "{{ _instance.networks | default([]) | list }}"
  loop_control:
    loop_var: _network 
    index_var: _network_idx

- debug: var=_instance_interfaces

- name: Create instance(s) "{{ _instance.name }}"
  register: r_openshift_cnv_instance
  vars:
    _instance_name: "{{ _instance.name }}{{ _index+1 if _instance.count|d(1)|int > 1 }}"
    _datavolume:
      - name: "{{ _instance_name }}-{{ guid }}"
        source:
          pvc:
            namespace: "cnv-images"
            name: "{{ _instance.image }}"
        pvc:
          accessModes:
            - ReadWriteMany
          volumeMode: Block
          storage: "{{ _instance.image_size }}"
          name: "{{ _instance_name  }}-{{ guid }}"
  community.kubevirt.kubevirt_vm:
    host: "{{ openshift_cnv_api_uri }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    validate_certs: False
    cpu_model: "host-passthrough"
    machine_type: pc-i440fx-rhel7.6.0
    state: running
    name: "{{ _instance_name }}"
    namespace: "{{ openshift_cnv_project_name }}"
    memory: "{{ ((_instance.memory |  regex_replace('[^0-9]') | int) / 2)|int|string + (_instance.memory |  regex_replace('[0-9]')) }}"
    cpu_cores: "{{ _instance.cores }}"
    wait_timeout: 1200
    interfaces: "{{ _instance_interfaces | default(omit) }}"
    datavolumes: "{{ _datavolume + _instance.disks|default([]) }}"
    definition:
      metadata:
        annotations: >-
          {{ cloud_tags_final
          | combine(_instance.metadata|default({})) | combine(_instance.tags | ec2_tags_to_dict) }}
      spec:
        template:
            spec:
              domain:
                resources:
                  overcommitGuestOverhead: true
                memory: 
                  guest: "{{ _instance.memory }}"
    cloud_init_nocloud: 
      userData: |-
        #cloud-config
        ssh_authorized_keys:
          - {{ lookup('file', openshift_cnv_ssh_pub_key_path ) }}
        {% if _instance.userdata is defined %}{{ _instance.userdata | to_nice_yaml }}{% endif %}
      networkData: |-
        {{ _instance.networkdata | default({'version': 2}) | to_nice_yaml }}
  loop: "{{ range(1, _instance.count|default(1)|int+1) | list }}"
  loop_control:
    index_var: _index

- set_fact:
    r_openshift_cnv_instances: "{{ r_openshift_cnv_instances + [item] }}"
  loop: "{{ r_openshift_cnv_instance.results | list }}"
