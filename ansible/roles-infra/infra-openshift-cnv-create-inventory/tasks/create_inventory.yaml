---
- name: Debug OpenShift CNV Instances fact
  debug:
    var: r_openshift_cnv_instances
    verbosity: 2

# Find the bastion
- name: Find the bastion in this batch of hosts
  set_fact:
    local_bastion: "{{ item._instance.name }}"
  when:
    - '"bastions" in item.kubevirt_vm.metadata.annotations.AnsibleGroup|default("")'
  loop: "{{ r_openshift_cnv_instances | json_query('results[]') | list }}"
  loop_control:
    label: "{{ item._instance.name  }}"
  ignore_errors: true

- name: Expose bastion externally
  register: r_expose_bastion
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ local_bastion }}-ssh"
        namespace: "{{ openshift_cnv_project_name }}"
      spec:
        ports:
        - port: 22
          protocol: TCP
          targetPort: 22
        selector:
          vm.cnv.io/name: "{{ local_bastion }}"
        sessionAffinity: None
        type: NodePort

- name: Debug OpenShift CNV Instances fact
  debug:
    var: r_openshift_cnv_instances
    verbosity: 2


- name: Create inventory (add_host)
  loop: "{{ r_openshift_cnv_instances | json_query('results[]') | list }}"
  add_host:
    name: "{{ item._instance.name }}"
    ansible_ssh_host: "{{ item._instance.name }}"
    ansible_ssh_port: "{{ r_expose_bastion.result.spec.ports.0.nodePort }}"
    private_ip_address: "{{ item._instance.name }}"
    public_ip_address: "ssh.{{ openshift_cnv_apps_domain }}"
    groups: "{{ item.kubevirt_vm.metadata.annotations.AnsibleGroup|default(omit) }}"
    bastion: "{{ local_bastion | default('') }}"
    bastion_ssh_port: "{{ r_expose_bastion.result.spec.ports.0.nodePort }}"
    isolated:  "{{ item.kubevirt_vm.metadata.annotations.isolated | default(false) }}"


- name: Get a list of VMIs
  k8s_info:
    kind: VirtualMachineInstance
    namespace: "{{ openshift_cnv_project_name }}"
  register: r_vmi_list

- name: Set the variable r_vmi_list as a fact in localhost
  set_fact:
    r_vmi_list: "{{ r_vmi_list }}"
    



